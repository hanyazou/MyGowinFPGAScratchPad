#!/bin/bash -e

BOARD=tangnano20k
DEVICE=GW2AR-LV18QN88C8/I7
IMAGENAME=gowin_eda
USER=user
CWD=$( cd $( pwd ) &> /dev/null && pwd | sed -e "s|$( cd && pwd )/||" )
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
home_in_container=/home/$USER

usage()
{
    echo "macgowin [options] commans ..."
    echo
    echo "examples:"
    echo "    macgowin build examples/TangNanoZ80MEM run"
    echo "    macgowin flash"
    echo "    macgowin remove_image"
}

main()
{
    local args=()

    opt_out_dir=.

    while [[ $# -gt 0 ]]; do
        case $1 in
        -h|--help)
            usage
            shift
            ;;
        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            args+=("$1")
            shift
            ;;
        esac
    done

    set -- "${args[@]}"

    local done=false
    local exec_ide=false
    while [[ $# -gt 0 ]]; do
        case $1 in
        remove_image)
            remove_image
            ;;
        build)
            mkdir -p ${opt_out_dir}/impl
            shift
            if [ "$1" = "" ]; then
                usage
                exit 1
            fi
            generate_script "$1"
            run_container
            docker exec -it ${IMAGENAME}-i \
                /bin/bash -c "cd ${CWD} && gw_sh ${opt_out_dir}/impl/.gowin_script.tmp"
            ;;
        shell)
            run_container
            docker exec -it ${IMAGENAME}-i \
                /bin/bash -c "cd ${CWD} && exec /bin/bash"
            ;;
        ide)
            exec_ide=true
            ;;
        flash)
            openFPGALoader --board "${BOARD}" --write-flash ${opt_out_dir}/impl/pnr/project.fs
            ;;
        run)
            openFPGALoader --board "${BOARD}" ${opt_out_dir}/impl/pnr/project.fs
            ;;
        *)
            echo "Unknown command $1"
            exit 1
            ;;
        esac
        shift
        done=true
    done

    if ! $done || $exec_ide; then
        xhost +localhost
        run_container
        docker exec -it ${IMAGENAME}-i \
            /bin/bash -c gw_ide
    fi
}

cleanup_containers()
{
    local id=$( docker ps -a --filter ancestor=${IMAGENAME} | grep -v -e '^CONTAINER ID' | awk '{ print $1 }' )
    if [ "${id}" != "" ]; then
        docker stop ${id}
        docker rm ${id}
    fi
}

image_id()
{
    docker images | grep "^${IMAGENAME} " | awk '{ print $3 }'
}

image_exist()
{
    if [ "$( image_id )" != "" ]; then
        return 0
    else
        return 1
    fi
}

remove_image()
{
    cleanup_containers
    if image_exist; then
        local image_id=$( image_id )
        echo docker rmi ${image_id} ${IMAGENAME}
        docker rmi ${image_id} # ${IMAGENAME}
    fi
}

build_image()
{
    ( cd ${script_dir} &&
        docker build --network=host --file Dockerfile \
               --build-arg="UID=$(id -u)" \
               --build-arg="GID=$(id -g)" \
               --build-arg="USER=${USER}" \
               --build-arg="GOWIN=Gowin_V1.9.9.03_Education_linux" \
               --tag ${IMAGENAME} . )
}

path_in_container()
{
    local path="$1"
    echo "${home_in_container}/$( echo "$path" | sed -e "s|$( cd && pwd )/||" )"
}

generate_script()
{
    case "$1" in
    /*)
        PJD="$( path_in_container "$1" )"
        ;;
    *)
        PJD="${home_in_container}/${CWD}/$1"
        ;;
    esac
    cat "$1/gw_sh.script" | \
        sed -e "s|\${PJD}|${PJD}|g" \
            -e "s|\${DEVICE}|${DEVICE}|g" \
            > ${opt_out_dir}/impl/.gowin_script.tmp
    cat ${opt_out_dir}/impl/.gowin_script.tmp
}

run_container()
{
    if ! image_exist; then
        build_image
    fi
    local id=$( docker ps | grep -e " gowin_eda-i$" )
    if [ "${id}" == "" ]; then
        docker run -it -d --name ${IMAGENAME}-i \
            --volume="${HOME}/workspace:${home_in_container}/workspace:rw" \
            --volume="${HOME}/.Xauthority:${home_in_container}/.Xauthority:ro" \
            --env DISPLAY=host.docker.internal:0 \
            ${IMAGENAME}
    fi
}

main $*
